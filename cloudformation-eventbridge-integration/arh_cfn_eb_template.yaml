AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  CustomEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub ${AWS::StackName}-cloudFormationEventBus

  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - events.amazonaws.com
              Action: 
                - "sts:AssumeRole"
      Policies:
        - PolicyName: AllowCloudwatchPutEvents
          PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: 
                    - "events:PutEvents"
                  Resource:
                    - !GetAtt CustomEventBus.Arn

  EventBridgeToStepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - events.amazonaws.com
              Action: 
                - "sts:AssumeRole"
      Policies:
        - PolicyName: AllowStartStateMachine
          PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: 
                    - "states:StartExecution"
                  Resource:
                    - !GetAtt ArhCfnStateMachine.Arn

  CFStateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref CustomEventBus
      EventPattern:
        source:
          - aws.cloudformation
        detail-type:
          - CloudFormation Stack Status Change
        detail:
          status-details:
            status:
              - CREATE_COMPLETE
              - UPDATE_COMPLETE
              - DELETE_COMPLETE
      State: ENABLED
      Targets:
        - Id: 0
          Arn: !GetAtt ArhCfnStateMachine.Arn
          RoleArn: !GetAtt EventBridgeToStepFunctionsRole.Arn

  SendToCFBusRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source:
          - aws.cloudformation
        detail-type:
          - CloudFormation Stack Status Change
        detail:
          status-details:
            status:
              - CREATE_COMPLETE
              - UPDATE_COMPLETE
              - DELETE_COMPLETE
      State: ENABLED
      Targets:
        - Id: 0
          Arn: !GetAtt CustomEventBus.Arn
          RoleArn: !GetAtt EventBridgeRole.Arn

  ResiliencyPolicyNonCritical:
    Type: 'AWS::ResilienceHub::ResiliencyPolicy'
    Properties:
      Policy:
        Software:
          RpoInSecs: 86400
          RtoInSecs: 172800
        Hardware:
          RpoInSecs: 86400
          RtoInSecs: 172800
        AZ:
          RpoInSecs: 86400
          RtoInSecs: 172800
      PolicyName: NonCritical
      Tier: NonCritical
  
  ResiliencyPolicyCoreServices:
    Type: 'AWS::ResilienceHub::ResiliencyPolicy'
    Properties:
      Policy:
        Software:
          RpoInSecs: 900
          RtoInSecs: 3600
        Hardware:
          RpoInSecs: 5
          RtoInSecs: 30
        AZ:
          RpoInSecs: 5
          RtoInSecs: 30
      PolicyName: CoreServices
      Tier: CoreServices
  
  ResiliencyPolicyImportant:
    Type: 'AWS::ResilienceHub::ResiliencyPolicy'
    Properties:
      Policy:
        Software:
          RpoInSecs: 14400
          RtoInSecs: 172800
        Hardware:
          RpoInSecs: 7200
          RtoInSecs: 172800
        AZ:
          RpoInSecs: 7200
          RtoInSecs: 172800
      PolicyName: Important
      Tier: Important
  
  ResiliencyPolicyCritical:
    Type: 'AWS::ResilienceHub::ResiliencyPolicy'
    Properties:
      Policy:
        Software:
          RpoInSecs: 3600
          RtoInSecs: 14400
        Hardware:
          RpoInSecs: 3600
          RtoInSecs: 3600
        AZ:
          RpoInSecs: 3600
          RtoInSecs: 3600
      PolicyName: Critical
      Tier: Critical
  
  ResiliencyPolicyMissionCritical:
    Type: 'AWS::ResilienceHub::ResiliencyPolicy'
    Properties:
      Policy:
        Software:
          RpoInSecs: 900
          RtoInSecs: 3600
        Hardware:
          RpoInSecs: 300
          RtoInSecs: 300
        AZ:
          RpoInSecs: 300
          RtoInSecs: 300
      PolicyName: MissionCritical
      Tier: MissionCritical

  ArhCfnStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - states.amazonaws.com
              Action: 
                - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      Policies:
        - PolicyName: AllowResilienceHub
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "resiliencehub:CreateApp"
                  - "resiliencehub:DeleteApp"
                  - "resiliencehub:DeleteAppAssessment"
                  - "resiliencehub:ImportResourcesToDraftAppVersion"
                  - "resiliencehub:PublishAppVersion"
                  - "resiliencehub:StartAppAssessment"
                  - "resiliencehub:TagResource"
                  - "resiliencehub:UpdateApp"
                Resource:
                  - !Sub "arn:${AWS::Partition}:resiliencehub:${AWS::Region}:${AWS::AccountId}:*"

  ArhCfnStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties: 
      Definition:
        Comment: >-
          Create, update, or delete Resilience Hub applications in response to
          CloudFormation events
        StartAt: DescribeStacks
        States:
          Check Assessment Status:
            Choices:
              - Next: Create/Update Successful
                StringMatches: Success
                Variable: $.Assessments.Assessment.AssessmentStatus
            Default: Wait for Assessment
            Type: Choice
          Check Import Status:
            Choices:
              - Next: PublishAppVersion
                StringMatches: Success
                Variable: $.Import.Status
            Default: Wait for Import
            Type: Choice
          Create, Update, Delete:
            Choices:
              - Comment: CREATE_COMPLETE
                Next: ForEach Tag
                StringEquals: CREATE_COMPLETE
                Variable: $.Stacks[0].StackStatus
              - Comment: UPDATE_COMPLETE
                Next: ForEach Tag
                StringEquals: UPDATE_COMPLETE
                Variable: $.Stacks[0].StackStatus
              - Comment: DELETE_COMPLETE
                Next: ListApps (Delete)
                StringEquals: DELETE_COMPLETE
                Variable: $.Stacks[0].StackStatus
            Default: Fail
            Type: Choice
          Create/Update Successful:
            Type: Succeed
          CreateApp:
            Next: Update Tags
            Parameters:
              Description: DO NOT DELETE -- This application is managed by CloudFormation
              Name.$: $.Stacks[0].StackName
              PolicyArn.$: $.ForEachTag.PolicyArn
              EventSubscriptions.$: $.ForEachTag.Notify
            Resource: arn:aws:states:::aws-sdk:resiliencehub:createApp
            ResultPath: $.Apps
            Type: Task
          Delete Successful:
            Type: Succeed
          DeleteApp:
            Next: Delete Successful
            Parameters:
              AppArn.$: $.AppSummaries[0].AppArn
            Resource: arn:aws:states:::aws-sdk:resiliencehub:deleteApp
            Type: Task
          DescribeAppAssessment:
            Next: Check Assessment Status
            Parameters:
              AssessmentArn.$: $.Assessments.Assessment.AssessmentArn
            Resource: arn:aws:states:::aws-sdk:resiliencehub:describeAppAssessment
            ResultPath: $.Assessments
            Type: Task
          DescribeDraftAppVersionResourcesImportStatus:
            Next: Check Import Status
            Parameters:
              AppArn.$: $.Import.AppArn
            Resource: >-
              arn:aws:states:::aws-sdk:resiliencehub:describeDraftAppVersionResourcesImportStatus
            ResultPath: $.Import
            Type: Task
          DescribeStacks:
            Next: Create, Update, Delete
            Parameters:
              StackName.$: $.detail.stack-id
            Resource: arn:aws:states:::aws-sdk:cloudformation:describeStacks
            Type: Task
          Fail:
            Type: Fail
          ForEach Assessment:
            ItemProcessor:
              ProcessorConfig:
                Mode: INLINE
              StartAt: DeleteAppAssessment
              States:
                DeleteAppAssessment:
                  End: true
                  Parameters:
                    AssessmentArn.$: $.AssessmentArn
                  Resource: arn:aws:states:::aws-sdk:resiliencehub:deleteAppAssessment
                  ResultPath: null
                  Type: Task
            ItemsPath: $.result.AssessmentSummaries
            Next: DeleteApp
            ResultPath: null
            Type: Map
          ForEach Tag:
            ItemProcessor:
              ProcessorConfig:
                Mode: INLINE
              StartAt: Check for 'app_criticality'
              States:
                Check for 'app_criticality':
                  Choices:
                    - Next: ListResiliencyPolicies
                      StringMatches: app_criticality
                      Variable: $.Key
                    - Next: Format Notification Types
                      StringMatches: app_owner
                      Variable: $.Key
                  Type: Choice
                  Default: Pass
                Pass:
                  Type: Pass
                  End: true
                Format Notification Types:
                  Type: Parallel
                  Branches:
                    - StartAt: Type 1
                      States:
                        Type 1:
                          Type: Pass
                          Parameters:
                            EventType: DriftDetected
                            Name: DriftDetected
                            SnsTopicArn.$: $.Value
                          End: true
                    - StartAt: Type 2
                      States:
                        Type 2:
                          Type: Pass
                          End: true
                          Parameters:
                            EventType: ScheduledAssessmentFailure
                            Name: ScheduledAssessmentFailure
                            SnsTopicArn.$: $.Value
                  End: true
                ListResiliencyPolicies:
                  End: true
                  Parameters:
                    PolicyName.$: $.Value
                  Resource: arn:aws:states:::aws-sdk:resiliencehub:listResiliencyPolicies
                  Type: Task
                  ResultSelector:
                    PolicyArn.$: $.ResiliencyPolicies[0].PolicyArn
            ItemsPath: $.Stacks[0].Tags
            Next: ListApps
            ResultPath: $.ForEachTag
            Type: Map
            ResultSelector:
              PolicyArn.$: $.[0].PolicyArn
              Notify.$: $..[?(@.EventType)]
          If App Found (Delete):
            Choices:
              - IsPresent: true
                Next: ListAppAssessments
                Variable: $.AppSummaries[0]
            Default: Delete Successful
            Type: Choice
          If Assessment(s) Found:
            Choices:
              - IsPresent: true
                Next: ForEach Assessment
                Variable: $.result.AssessmentSummaries[0]
            Default: DeleteApp
            Type: Choice
          ImportResourcesToDraftAppVersion:
            Next: Wait for Import
            Parameters:
              AppArn.$: $.Apps.App.AppArn
              SourceArns.$: States.Array($.Stacks[0].StackId)
            Resource: arn:aws:states:::aws-sdk:resiliencehub:importResourcesToDraftAppVersion
            ResultPath: $.Import
            Type: Task
          ListAppAssessments:
            Next: If Assessment(s) Found
            Parameters:
              AppArn.$: $.AppSummaries[0].AppArn
            Resource: arn:aws:states:::aws-sdk:resiliencehub:listAppAssessments
            ResultPath: $.result
            Type: Task
          ListApps:
            Next: UPDATE/CREATE
            Parameters:
              Name.$: $.Stacks[0].StackName
            Resource: arn:aws:states:::aws-sdk:resiliencehub:listApps
            ResultPath: $.Apps
            Type: Task
          ListApps (Delete):
            Next: If App Found (Delete)
            Parameters:
              Name.$: $.Stacks[0].StackName
            Resource: arn:aws:states:::aws-sdk:resiliencehub:listApps
            Type: Task
          PublishAppVersion:
            Next: StartAppAssessment
            Parameters:
              AppArn.$: $.Import.AppArn
            Resource: arn:aws:states:::aws-sdk:resiliencehub:publishAppVersion
            ResultPath: $.App
            Type: Task
          StartAppAssessment:
            Next: Wait for Assessment
            Parameters:
              AppArn.$: $.App.AppArn
              AppVersion: release
              AssessmentName.$: States.Format('Assessment-report-{}', States.UUID())
            Resource: arn:aws:states:::aws-sdk:resiliencehub:startAppAssessment
            ResultPath: $.Assessments
            Type: Task
          UPDATE/CREATE:
            Choices:
              - And:
                  - StringEquals: UPDATE_COMPLETE
                    Variable: $.Stacks[0].StackStatus
                  - IsPresent: true
                    Variable: $.Apps.AppSummaries[0]
                Next: UpdateApp
            Default: CreateApp
            Type: Choice
          UpdateApp:
            Next: Update Tags
            Parameters:
              AppArn.$: $.Apps.AppSummaries[0].AppArn
              PolicyArn.$: $.ForEachTag.PolicyArn
              EventSubscriptions.$: $.ForEachTag.Notify
            Resource: arn:aws:states:::aws-sdk:resiliencehub:updateApp
            ResultPath: $.Apps
            Type: Task
          Update Tags:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: $
              FunctionName: !Sub ${UpdateTagsFunction.Arn}:$LATEST
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
            Next: ImportResourcesToDraftAppVersion
            ResultPath: null
          Wait for Assessment:
            Next: DescribeAppAssessment
            Seconds: 5
            Type: Wait
          Wait for Import:
            Next: DescribeDraftAppVersionResourcesImportStatus
            Seconds: 5
            Type: Wait
        TimeoutSeconds: 60      
      Role: !GetAtt ArhCfnStateMachineRole.Arn
  
  UpdateTagsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: 
                - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowResilienceHubTagging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "resiliencehub:ListTagsForResource"
                  - "resiliencehub:TagResource"
                  - "resiliencehub:UntagResource"
                Resource:
                  - !Sub "arn:${AWS::Partition}:resiliencehub:${AWS::Region}:${AWS::AccountId}:*"
  
  UpdateTagsFunction:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This function does not need to communicate with any resources within a customer VPC - only AWS services"
    Properties:
      Role: !GetAtt UpdateTagsFunctionRole.Arn
      Environment:
        Variables:
          SNS_TOPIC: blank
      Code:
        ZipFile: |
          import boto3
          import json

          arh = boto3.client("resiliencehub")

          def lambda_handler(event, context):
              # Get ARH app arn from event
              app_arn = event["Apps"]["App"]["AppArn"]
              
              # Get list of tags from the event, reformat into key:value
              tags = {}
              for t in event["Stacks"][0]["Tags"]:
                  key = t["Key"]
                  value = t["Value"]
                  tags[key] = value
              
              try:
                  # Check for existing tags, remove if present
                  existing_tags = arh.list_tags_for_resource(resourceArn=app_arn)
                  if len(existing_tags['tags']) > 0:
                      arh.untag_resource(resourceArn=app_arn, tagKeys=list(existing_tags['tags'].keys()))
                  
                  # Don't update tags if none were listed in the event
                  if len(tags) > 0:
                      update_tags = arh.tag_resource(resourceArn=app_arn, tags=tags)
              except Exception as e:
                  print("The error is: ",e)
              
              return {
                  'statusCode': 200,
                  'body': "Current tags: {}".format(json.dumps(tags))
              }
      Handler: index.lambda_handler
      Runtime: python3.11
      ReservedConcurrentExecutions: 2
      TracingConfig:
        Mode: Active